#!/usr/bin/env python
"""
Fix migrations script for BoltAbacus
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.db import connection

def setup_environment():
    """Set up environment variables"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BoltAbacus.settings')
    os.environ.setdefault('DATABASE_TYPE', 'local')
    os.environ.setdefault('DEBUG', 'True')

def create_migrations():
    """Create migrations with default value"""
    print("Creating migrations...")
    
    # Create a temporary migration file
    migration_content = '''# Generated by fix_migrations.py
from django.db import migrations, models
import django.utils.timezone

class Migration(migrations.Migration):
    dependencies = [
        ('Authentication', '0002_userdetails_xp'),
    ]

    operations = [
        migrations.AddField(
            model_name='practicequestions',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('roomId', models.AutoField(primary_key=True, serialize=False)),
                ('roomName', models.CharField(max_length=100)),
                ('maxPlayers', models.IntegerField(default=2)),
                ('currentPlayers', models.IntegerField(default=0)),
                ('isActive', models.BooleanField(default=True)),
                ('isPrivate', models.BooleanField(default=False)),
                ('roomCode', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('gameType', models.CharField(default='abacus_pvp', max_length=50)),
                ('difficulty', models.CharField(default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('createdBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.userdetails')),
            ],
        ),
        migrations.CreateModel(
            name='GameMatch',
            fields=[
                ('matchId', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(default='waiting', max_length=20)),
                ('gameState', models.TextField(default='{}')),
                ('currentQuestion', models.IntegerField(default=0)),
                ('totalQuestions', models.IntegerField(default=10)),
                ('timeLimit', models.IntegerField(default=60)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.gameroom')),
            ],
        ),
        migrations.CreateModel(
            name='GamePlayer',
            fields=[
                ('playerId', models.AutoField(primary_key=True, serialize=False)),
                ('isReady', models.BooleanField(default=False)),
                ('currentScore', models.IntegerField(default=0)),
                ('totalCorrect', models.IntegerField(default=0)),
                ('totalIncorrect', models.IntegerField(default=0)),
                ('averageTime', models.FloatField(default=0)),
                ('lastAnswerTime', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.gamematch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.userdetails')),
            ],
            options={
                'unique_together': {('match', 'user')},
            },
        ),
        migrations.CreateModel(
            name='GameQuestion',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('questionNumber', models.IntegerField()),
                ('questionText', models.CharField(max_length=500)),
                ('correctAnswer', models.CharField(max_length=50)),
                ('questionType', models.CharField(default='addition', max_length=50)),
                ('difficulty', models.CharField(default='medium', max_length=20)),
                ('timeLimit', models.IntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.gamematch')),
            ],
            options={
                'unique_together': {('match', 'questionNumber')},
            },
        ),
        migrations.CreateModel(
            name='GameAnswer',
            fields=[
                ('answerId', models.AutoField(primary_key=True, serialize=False)),
                ('answer', models.CharField(max_length=50)),
                ('isCorrect', models.BooleanField()),
                ('responseTime', models.FloatField()),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.gameplayer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.gamequestion')),
            ],
            options={
                'unique_together': {('question', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerConnection',
            fields=[
                ('connectionId', models.AutoField(primary_key=True, serialize=False)),
                ('isOnline', models.BooleanField(default=True)),
                ('lastSeen', models.DateTimeField(auto_now=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Authentication.gamematch')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Authentication.gameroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Authentication.userdetails')),
            ],
            options={
                'unique_together': {('user', 'room', 'match')},
            },
        ),
    ]
'''
    
    # Write migration file
    migration_dir = 'Authentication/migrations'
    if not os.path.exists(migration_dir):
        os.makedirs(migration_dir)
    
    migration_file = os.path.join(migration_dir, '0003_multiplayer_models.py')
    with open(migration_file, 'w') as f:
        f.write(migration_content)
    
    print("âœ“ Migration file created successfully")
    return True

def apply_migrations():
    """Apply database migrations"""
    print("Applying migrations...")
    try:
        execute_from_command_line(['manage.py', 'migrate'])
        print("âœ“ Migrations applied successfully")
    except Exception as e:
        print(f"âœ— Error applying migrations: {e}")
        return False
    return True

def collect_static():
    """Collect static files"""
    print("Collecting static files...")
    try:
        execute_from_command_line(['manage.py', 'collectstatic', '--noinput'])
        print("âœ“ Static files collected successfully")
    except Exception as e:
        print(f"âœ— Error collecting static files: {e}")
        return False
    return True

def main():
    """Main function"""
    print("ðŸ”§ Fixing migrations for BoltAbacus...")
    
    # Setup environment
    setup_environment()
    
    # Initialize Django
    django.setup()
    
    # Create migrations
    if not create_migrations():
        print("Failed to create migrations")
        sys.exit(1)
    
    # Apply migrations
    if not apply_migrations():
        print("Failed to apply migrations")
        sys.exit(1)
    
    # Collect static files
    if not collect_static():
        print("Failed to collect static files")
        sys.exit(1)
    
    print("\nðŸŽ‰ Migration fix completed successfully!")
    print("\nYou can now run:")
    print("python manage.py runserver")

if __name__ == '__main__':
    main()
